// Mocks generated by Mockito 5.0.6 from annotations
// in pokedex/test/app/pokedex_detail/pokedex_detail.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pokedex/app/pokedex_detail/domain/entities/pokemon.dart' as _i2;
import 'package:pokedex/app/pokedex_detail/domain/repositories/pokemon_detail_repository.dart'
    as _i7;
import 'package:pokedex/app/pokedex_detail/infra/datasources/pokemon_detail_remote_datasource.dart'
    as _i5;
import 'package:pokedex/app/pokedex_detail/infra/datasources/pokemon_local_datasource.dart'
    as _i6;
import 'package:pokedex/app/pokedex_detail/presenter/usecases/pokemon_detail_usecases.dart'
    as _i8;
import 'package:shared_preferences/shared_preferences.dart' as _i3;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakePokemon extends _i1.Fake implements _i2.Pokemon {}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i3.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(Invocation.method(#getKeys, []),
      returnValue: <String>{}) as Set<String>);
  @override
  Object? get(String? key) =>
      (super.noSuchMethod(Invocation.method(#get, [key])) as Object?);
  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(Invocation.method(#getBool, [key])) as bool?);
  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key])) as int?);
  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(Invocation.method(#getDouble, [key])) as double?);
  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(#getStringList, [key]))
          as List<String>?);
  @override
  _i4.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(Invocation.method(#setBool, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(Invocation.method(#setInt, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(Invocation.method(#setDouble, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#setString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(Invocation.method(#setStringList, [key, value]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> remove(String? key) =>
      (super.noSuchMethod(Invocation.method(#remove, [key]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> commit() =>
      (super.noSuchMethod(Invocation.method(#commit, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<bool> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}

/// A class which mocks [PokemonDetailRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonDetailRemoteDatasource extends _i1.Mock
    implements _i5.PokemonDetailRemoteDatasource {
  MockPokemonDetailRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>> fetchPokemonDetailData(String? id) =>
      (super.noSuchMethod(Invocation.method(#fetchPokemonDetailData, [id]),
              returnValue:
                  Future<Map<String, dynamic>>.value(<String, dynamic>{}))
          as _i4.Future<Map<String, dynamic>>);
}

/// A class which mocks [PokemonLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonLocalDatasource extends _i1.Mock
    implements _i6.PokemonLocalDatasource {
  MockPokemonLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> storePokemon(String? content) =>
      (super.noSuchMethod(Invocation.method(#storePokemon, [content]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}

/// A class which mocks [PokemonDetailRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonDetailRepository extends _i1.Mock
    implements _i7.PokemonDetailRepository {
  MockPokemonDetailRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Pokemon> fetchPokemonDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#fetchPokemonDetail, [id]),
              returnValue: Future<_i2.Pokemon>.value(_FakePokemon()))
          as _i4.Future<_i2.Pokemon>);
  @override
  _i4.Future<void> catchPokemon(_i2.Pokemon? pokemon) =>
      (super.noSuchMethod(Invocation.method(#catchPokemon, [pokemon]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}

/// A class which mocks [FetchPokemonDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPokemonDetails extends _i1.Mock
    implements _i8.FetchPokemonDetails {
  MockFetchPokemonDetails() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Pokemon> call(int? id) =>
      (super.noSuchMethod(Invocation.method(#call, [id]),
              returnValue: Future<_i2.Pokemon>.value(_FakePokemon()))
          as _i4.Future<_i2.Pokemon>);
}
